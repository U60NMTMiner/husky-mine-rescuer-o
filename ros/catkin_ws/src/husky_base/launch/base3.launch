<?xml version="1.0"?>
<!--
Copyright (c) 2014, Clearpath Robotics
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Clearpath Robotics nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
    <!-- Initialize arguments-->
    <arg name="can" default="true" />
    <arg name="base" default="true" />
    <arg name="port" default="$(optenv HUSKY_PORT /dev/prolific)" />
    <arg name="ouster" default="$(optenv HUSKY_OUSTER_ENABLED true)" />
    <arg name="ouster_host" default="$(optenv HUSKY_OUSTER_HOSTNAME os-122238000296.local)" />
    <arg name="nodedrop" default="$(optenv HUSKY_NODEDROP true)" />
    <arg name="imu" default="false" /> <!-- this means vectornav IMU-->
    <arg name="pi_addr" default="$(optenv PI_ADDRESS 10.0.0.5)" /> <!-- rasp-Pi with vnav IMU-->
    <!--arg name="velodyne" default="false" /-->
    <arg name="laser_3d_topic" default="$(optenv HUSKY_LASER_3D_TOPIC /points2)"/>
    <arg name="laser_scan_topic" default="$(optenv HUSKY_LASER_SCAN_TOPIC /points2scan)"/>
    <arg name="gmap" default="$(optenv HUSKY_GMAP false)"/> <!-- hector slam-->
    <arg name="cart_map" default="$(optenv HUSKY_CART false)"/> <!-- google cartographer-->
    <arg name="amcl" default="$(optenv HUSKY_AMCL false)"/> 
    <arg name="rviz" default="$(optenv HUSKY_VIZ false)"/>
    <arg name="rviz_conf" default="$(optenv HUSKY_RVIZ_CONF ~/husky_coal_base_o/rviz/g_cart_n4.rviz)"/>
    
    <!-- Initialize params-->
    <param name="use_sim_time" value="false" />

    <!--Fire up ROS nodes-->
    <!--=================-->
    <group if="$(arg base)">
        <remap from="husky_velocity_controller/odom" to="odom" />
        <!-- Husky harware driver -->
        <!-- launch-prefix="gdb -ex run ++args"--> <!-- args needs double dash before it--> 
        <node pkg="husky_base" type="husky_node" name="husky_node" required="true"> 
        <!--node pkg="husky_base" type="husky_node" name="husky_node" required="true"-->
            <rosparam subst_value="true">
                port: $(arg port)

                control_frequency: 10.0
                diagnostic_frequency: 1.0

                max_acceleration: 3.0
                max_speed: 1.0
                wheel_diameter: 0.3302
                polling_timeout: 10.0
            </rosparam>
        </node>

        <!-- Differential controller parameters and basic localization -->
        <include file="$(find husky_control)/launch/control.launch">
            <arg name="enable_ekf" value="true" />
        </include>

        <!--Teleop -->
        <!--include file="$(find husky_control)/launch/teleop.launch" /-->

        <!-- Diagnostic Aggregator -->
        <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
            <rosparam command="load" file="$(find husky_base)/config/diagnostics.yaml"/>
        </node>
    </group>


    <!-- OS1 resolution and rate possible values
     512x10,
     512x20,
     1024x10,
     1024x20,
     2048x10,
     4096x5
    -->
    <group if="$(arg ouster)">
       <remap from="/ouster/points" to="$(arg laser_3d_topic)" />
       <remap from="/ouster/imu" to="/ouster/imu" /> 
	<!--include file="$(find ouster_ros)/launch/driver.launch"-->
        <include file="$(find ouster_ros)/launch/sensor.launch">  
            <!--arg name="sensor_hostname" value="10.0.0.4"/-->  
            <!--arg name="sensor_hostname" value="ouster"/-->  <!--check ouster in /etc/hosts-->
            <arg name="sensor_hostname" value="$(arg ouster_host)" />
            <arg name="udp_dest" value="10.0.0.1" />
            <!--arg name="udp_dest" value="192.168.0.111" /-->
            <arg name="lidar_port" value="7502" />
            <arg name="imu_port" value="7503" /> 
            
            <arg name="lidar_mode" value="1024x10" />
            <!--arg name="lidar_mode" value="512x10" /-->
            <arg name="timestamp_mode" value="TIME_FROM_ROS_TIME" />    
        </include>
    </group>

    <!--group if="$(arg velodyne)">
        <remap from="/velodyne_points" to="/points2" />
        <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch">
        </include>
    </group-->
    
    <group if="$(arg nodedrop)">
        <!--include file="$(find husky_nodedrop)/launch/husky_nodedrop_yaml.launch"/-->  
        <include file="$(find husky_gpio_signal)/launch/husky_gpio_signal_env.launch"/>  
    </group>

    <!--group if="$(arg map)">
        <node name="cartographer_node" pkg="cartographer_ros"
            type="cartographer_node" args="
            -configuration_directory $(find cartographer_ros)/configuration_files
            -configuration_basename husky.lua"
            output="screen">
        </node>

        <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
            type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
            
    </group-->
    
     <!-- Launch gmapping & move_base-->
     <group if="$(arg gmap)">
    
       <!-- Launch pointcloud_to_lasermap node for gmapping or amcl -->
       <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="ouster_laserscan_node" output="screen" required="true"> 
         <param name="~/target_frame"        value="os_sensor"/> 
         <param name="~/transform_tolerance" value="0.01"/>
         <param name="~/min_height"          value="-0.2"/>  <!-- change this to exclude floor bumps from costmap -->
         <param name="~/max_height"          value="0.2"/>
         <param name="~/angle_min"           value="-3.14159"/> <!-- -pi/2 -1.570796327-->
         <param name="~/angle_max"           value="3.14159"/>  <!-- pi/2 1.570796327-->
         <param name="~/angle_increment"     value="0.0087"/>
         <param name="~/scan_time"           value="0.3333"/> 
         <param name="~/range_min"           value="0.45"/>
         <param name="~/range_max"           value="50"/>       
         <param name="~/concurrency_level"   value="0"/>
         <param name="~/use_inf"             value="true"/>
       
         <remap from="/cloud_in" to="$(arg laser_3d_topic)"/>
         <remap from="/scan" to="$(arg laser_scan_topic)"/>
       </node>
     
       <!--- Run gmapping - Define the desired parameters in ...husky_coal_navigation/config/costmap_common.yaml --> 
       <include file="$(find husky_coal_navigation)/launch/gmapping_slam/gmapping.launch">
       <!--include file="$(find husky_navigation)/launch/gmapping.launch"-->
         <!--arg name="scan_topic" value="scan" /-->
         <arg name="scan_topic" value="$(arg laser_scan_topic)"/>
         <!-- config parameters changed are "update_frequency" "publish_frequency" "resolution" -->
       </include>

     <!--- Run Move Base -->
     <include file="$(find husky_coal_navigation)/launch/move_base/move_base.launch">
     <!--include file="$(find husky_navigation)/launch/move_base.launch"-->
       <arg name="no_static_map" value="true"/>
       <!--arg name="scan_topic" value="scan" /-->
       <arg name="laser_scan_topic" value="$(arg laser_scan_topic)" />
     <!-- desired params are defined in the move_base.launch (so that default config files are preserved)-->
     </include>
     
  </group>
  
    <!-- Launch google_cartographer & move_base-->
    <group if="$(arg cart_map)">
       <!--- Run google cartographer -->
       <node name="cartographer_node" pkg="cartographer_ros"
            type="cartographer_node" args="
            -configuration_directory $(find cartographer_ros)/configuration_files
            -configuration_basename husky.lua"
            output="screen">
        </node>

        <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
            type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
            
        <remap from="/submap_list" to="/map" />
        <remap from="/scan_matched_points" to="/scan" />

      !--- Run Move Base -->
     <include file="$(find husky_coal_navigation)/launch/move_base/move_base.launch">
     <!--include file="$(find husky_navigation)/launch/move_base.launch"-->
       <arg name="no_static_map" value="true"/>
       <!--arg name="scan_topic" value="scan" /-->
       <arg name="laser_scan_topic" value="$(arg laser_scan_topic)" />
     <!-- desired params are defined in the move_base.launch (so that default config files are preserved)-->
     </include>
    </group>
  

    <group if="$(arg can)">
        <include file="$(find can)/launch/can.launch" />
    </group>
    
       
    <!-- RVIZ  --> 
    <group if="$(arg rviz)">
      <!--node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" output="screen"/-->
      <node name="rviz" pkg="rviz" type="rviz" output="screen"
        args="-d $(arg rviz_conf)" />
    </group>
    
    <!--
    THIS GROUP MUST BE LAST
    Everything after it will run on the pi
    -->
    <group if="$(arg imu)">
        <remap from="vectornav/IMU" to="imu/data_raw" />
        <remap from="vectornav/Mag" to="imu/mag" />
        <remap from="imu/data" to="imu" />
        <machine
            name="pi"
            address="$(arg pi_addr)"
            user="pi"
            password="123456789"
            env-loader="/home/pi/husky/scripts/env_pi.sh"
            default="true"
        />
        <include file="$(find vectornav)/launch/vectornav.launch" />
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
            <rosparam>
                publish_tf: false
            </rosparam>
        </node>
    </group>
</launch>
